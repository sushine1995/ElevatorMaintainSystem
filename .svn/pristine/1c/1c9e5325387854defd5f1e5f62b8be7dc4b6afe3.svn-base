<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd  
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd"
	default-lazy-init="false">
	<import resource="config.xml" />
	<!--第一步 -->
	<!--定义服务层代码存放的包扫描路径 -->
	<context:component-scan
		base-package="com.vino.scaffold.service,
	com.vino.scaffold.shiro.service,
	com.vino.maintain.service,
	com.vino.maintain.websocket,
	com.vino.authentication.manager
	" />

	<!-- <bean id="maintainPlanJob" class="com.vino.maintain.service.quartz.MaintainPlanJob"></bean> 
		<task:scheduler id="myScheduler" pool-size="10" /> <task:scheduled-tasks 
		scheduler="myScheduler"> <task:scheduled ref="maintainPlanJob" method="createMaintainOrder" 
		cron="*/1 * * * * ?" /> <task:scheduled ref="maintainPlanJob" method="print" 
		cron="*/2 * * * * ?"/> </task:scheduled-tasks> -->
	<task:executor id="myExecutor" pool-size="5" />
	<task:scheduler id="myScheduler" pool-size="5" />
	<task:annotation-driven executor="myExecutor"
		scheduler="myScheduler" />

	<task:executor id="appPushExecutor" pool-size="2" />

	<import resource="druid-config.xml" />
		<!-- 配置redis -->
	<!-- <bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="localhost" p:port="6379" p:password="xmu306zhuoyue"
		>
		<property name="usePool" value="true"></property>
	</bean> -->
	<bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="localhost" p:port="6379">
		<property name="usePool" value="true"></property>
	</bean>

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnFactory"></property>
	</bean>
	<!--第二步 -->
	<!--定义实体的工厂bean -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="persistenceUnitName" value="userPU" />
		<property name="persistenceXmlLocation" value="classpath:persistence.xml"></property>
	</bean>

	<!--第三步 -->
	<!--定义事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!--第四步 -->
	<!--定义repository接口的存放目录 -->
	<!--定义接口实现的后缀，通常用Impl -->
	<!--定义实体工厂的引用 -->
	<!--定义事务管理器的引用 -->
	<!-- 配置了 <jpa:repositories> 后，Spring 初始化容器时将会扫描 base-package 指定的包目录及其子目录， 
		为继承 Repository 或其子接口的接口创建代理对象，并将代理对象注册为 Spring Bean，业务层便可以通过 Spring 自动封装的特性来直接使用该对象。 -->
	<!-- repository实现类的后缀 ，有时候spring data的接口不能满足我们的要求，可以自己写实现类 -->
	<jpa:repositories
		base-package="com.vino.scaffold.repository,com.vino.scaffold.shiro.repository,com.vino.maintain.repository"
		repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager" />
	<!--第五步 -->
	<!--声明采用注解的方式申明事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<import resource="spring-shiro-web.xml" />
	<!-- <import resource="spring-websocket.xml"/> -->
</beans>